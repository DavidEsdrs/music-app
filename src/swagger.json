{
    "openapi": "3.0.0",
    "info": {
        "title": "Music App API",
        "description": "API to songs streaming and playlist management"
    },
    "servers": [
        {
            "url": "http://localhost:3737/api",
            "description": "API endpoint to production"
        }
    ],
    "paths": {
        "/users": {
            "post": {
                "summary": "User registration",
                "description": "This route is responsible for register a new user",
                "tags": ["users"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/user"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/components/schemas/user"
                        }
                    },
                    "401": {
                        "summary": "Operation failed",
                        "description": "The given email is already used",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "description": "Describes the error as clear as possible"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "get": {
                "summary": "User information",
                "description": "This route allows the client to get info of the user, doesn't return any sensible information",
                "tags": ["users"],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of the user to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/components/schemas/user"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "summary": "User login",
                "description": "This endpoint is used to login the used by giving its access token",
                "tags": ["users"],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "email": {
                                        "type": "string",
                                        "format": "email",
                                        "description": "The registered unique email",
                                        "example": "dav@email.com"
                                    },
                                    "password": {
                                        "type": "string",
                                        "format": "password",
                                        "description": "The password related to the given email",
                                        "minLength": 5
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "401": {
                        "summary": "Operation failed",
                        "description": "The given credentials is invalid either because the email or the password is wrong",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "description": "Describes the error as clear as possible"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "User logged in successfully",
                        "schema": {
                            "$ref": "#/components/schemas/user"
                        }
                    }
                }
            }
        },
        "/refresh": {
            "get": {
                "summary": "Access token refresh",
                "description": "Route to refresh the access token of the user",
                "tags": ["users"],
                "security": [{"cookieRefreshToken": []}],
                "responses": {
                    "200": {
                        "summary": "Successful operation",
                        "description": "The jwt refresh token cookie was validated and the client can get a new access token",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/user"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "accessToken": {
                                            "type": "string",
                                            "description": "The new access token"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                }
            }
        },
        "/logout": {
            "get": {
                "summary": "Log out user",
                "description": "Logs out user by removing its refresh token cookie",
                "tags": ["users"],
                "responses": {
                    "204": {
                        "summary": "Successful operation",
                        "description": "The server successfully removed the refresh token cookie from the client"
                    }
                }
            }
        },
        "/playlist": {
            "post": {
                "summary": "Create a new playlist",
                "description": "This route allow create a new playlist",
                "security": [{"bearerAuth": []}],
                "tags": ["playlists"],
                "consumes": ["multipart/form-data"],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "title": {
                                        "type": "string",
                                        "description": "A title for the playlist",
                                        "example": "The Dark Side Of The Moon",
                                        "minLength": 3,
                                        "maxLength": 50
                                    },
                                    "description": {
                                        "type": "string",
                                        "description": "An playlist description",
                                        "maxLength": 255,
                                        "example": "The most famous Pink Floyd album"
                                    },
                                    "featured_picture": {
                                        "type": "string",
                                        "format": "binary",
                                        "description": "Holds the playlist featured image"
                                    },
                                    "visibility": {
                                        "type": "string",
                                        "description": "The visibility of the playlist",
                                        "enum": ["private", "public"]
                                    },
                                    "released_on": {
                                        "type": "integer",
                                        "description": "Represents the year that the playlist/album was/will be launched",
                                        "minimum": 1901
                                    },
                                    "tags": {
                                        "description": "The tags wich the song belongs to",
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "minLength": 3,
                                                    "maxLength": 30
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "enum": {
                                                        "genre": {
                                                            "description": "Used when the name of the tag indicates a music genre."
                                                        },
                                                        "feature": {
                                                            "description": "The \"feature\" tags are used to indicate specific information about a song, such as the decade it belongs to, the mood or sentiment it conveys, or the instrumental elements it contains. These tags are useful for categorizing songs more precisely and enabling users to find music that matches their preferences more efficiently."
                                                        },
                                                        "artist": {
                                                            "description": "Used when the name of the tag indicates an artist."
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "examples": {
                                            "musicGenre": {
                                                "value": {
                                                    "name": "rock",
                                                    "type": "genre"
                                                }
                                            },
                                            "musicFeature": {
                                                "value": {
                                                    "name": "happy",
                                                    "type": "feature"
                                                }
                                            },
                                            "musicArtist": {
                                                "value": {
                                                    "name": "Pink Floyd",
                                                    "type": "artist"
                                                }
                                            }
                                        }
                                    }
                                },
                                "required": ["title", "tags"]
                            },
                            "encoding": {
                                "tags": {
                                    "contentType": "application/json"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "summary": "Successful operation",
                        "description": "The playlist was created successfully",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/playlist"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "tags": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/tag"
                                                    }
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "summary": "Operation failed",
                        "description": "The given credentials is invalid",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "description": "Describes the error as clear as possible"
                                }
                            }
                        }
                    },
                    "422": {
                        "summary": "Unprocessable Entity",
                        "description": "Unprocessable Entity. The request was well-formed but was unable to be followed due to semantic errors in the request body.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/responseEntity"
                                },
                                "examples": {
                                    "user": {
                                        "value": {
                                            "message": "\"tags\" is required"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/playlist/{playlistId}": {
            "get": {
                "summary": "Playlist information",
                "description": "This route allows the client to get information of the given playlist id",
                "tags": ["playlists"],
                "security": [{"bearerAuth": []}],
                "parameters": [
                    {
                        "name": "playlistId",
                        "in": "path",
                        "description": "Id of the playlist to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    }
                ],
                "responses": {
                    "200": {
                        "summary": "Successful operation",
                        "description": "The information was retrieved successfully",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/components/schemas/playlist"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "songs_url": {
                                            "type": "string",
                                            "summary": "URL to get the songs of the playlist",
                                            "description": "This variable holds the URL to get all the songs inside the playlist"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "summary": "Playlist not found",
                        "description": "The wanted resource wasn't found in the database, the response will be always the same",
                        "schema": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "example": "Playlist not found!"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Playlist",
                "description": "This route allows the client to update a given playlist",
                "tags": ["playlists"],
                "security": [{"bearerAuth": []}],
                "parameters": [
                    {
                        "name": "playlistId",
                        "in": "path",
                        "description": "Id of the playlist to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64",
                        "example": 1
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/playlist"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "summary": "Successful operation",
                        "description": "The playlist was successfully updated",
                        "schema": {
                            "$ref": "#/components/schemas/responseEntity"
                        }
                    },
                    "404": {
                        "summary": "Playlist not found",
                        "description": "The wanted resource wasn't found in the database, the response will be always the same",
                        "schema": {
                            "content": {
                                "application/json": {
                                    "schema": {
                                        "type": "object",
                                        "properties": {
                                            "error": {
                                                "type": "string",
                                                "example": "Playlist not found!"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a playlist",
                "description": "This route allows to delete a playlist by its ID. Only the playlist owner can delete the playlist.",
                "security": [{"bearerAuth": []}],
                "parameters": [
                    {
                        "name": "playlistId",
                        "in": "path",
                        "required": true,
                        "description": "The ID of the playlist to be deleted."
                    }
                ],
                "tags": ["playlists"],
                "responses": {
                    "200": {
                        "description": "Playlist deleted successfully.",
                        "schema": {
                            "$ref": "#/components/schemas/responseEntity"
                        }
                    },
                    "409": {
                        "summary": "Unprocessable Enitity",
                        "description": "The user is trying to delete its default playlist, it isn't able to delete its default playlist since it holds all the uploaded songs by the user. In this case, resend the request as it is won't work and the user must change the request",
                        "schema": {
                            "error": "Can't delete default playlist!",
                            "status_code": 409
                        }
                    },
                    "404": {
                        "description": "Not Found - The playlist with the specified ID does not exist.",
                        "schema": {
                            "error": "Song not found!",
                            "status_code": 404
                        }
                    }
                }
            },
            "post": {
                "summary": "Add playlist to user",
                "description": "This endpoint allows users to add playlists to their list. When this action is performed, the desired playlist is duplicated with the 'creator_fk' changed to match the 'requester_id'. This does not violate the application's terms, as all public playlists are considered to be accessible to any user who wants to consume them.",
                "tags": ["playlists"],
                "security": [{"bearerAuth": []}],
                "parameters": [
                    {
                        "name": "playlistId",
                        "in": "path",
                        "description": "The ID of the playlist to be added to the user's list.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "summary": "Successful operation",
                        "description": "The playlist was successfully duplicated and added to the user's playlist list",
                        "schema": {
                            "$ref": "#/components/schemas/responseEntity"
                        },
                        "example": {
                            "updated": {
                                "$ref": "#/components/schemas/playlist"
                            },
                            "message": "Playlist 5 added to user 1 as 6",
                            "status_code": 200
                        }
                    },
                    "401": {
                        "summary": "Authorization Error",
                        "description": "Authentication failed when attempting to process the request. This error may be due to an expired or missing JWT token, or the user is attempting to add a playlist that is not public or does not belong to them. The response message will indicate the specific reason for the error.",
                        "examples": {
                            "missingToken": {
                                "value": {
                                    "error": "No JWT token was found in the request headers!",
                                    "status_code": 401
                                }
                            },
                            "expiredToken": {
                                "value": {
                                    "error": "The JWT token has expired!",
                                    "status_code": 401
                                }
                            },
                            "playlistAccessError": {
                                "value": {
                                    "error": "Unauthorized access to the requested playlist. The playlist is either not public or the user is not the owner.",
                                    "status_code": 401
                                }
                            }
                        }
                    }
                }
            }
        },
        "/user/{userId}/playlist": {
            "get": {
                "summary": "Playlists from a user",
                "description": "This endpoint retrieves a list of all playlists that have been created by a user, with the option to retrieve both public and private playlists. If the requester's user ID matches the ID specified in the URL, then all of the user's playlists, including private ones, will be returned. Note that only public playlists can be accessed by users other than the playlist owner.",
                "tags": ["playlists"],
                "security": [{"bearerAuth": []}],
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The ID of the user whose playlists will be retrieved",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of playlists created by the user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/playlist"
                                    }
                                },
                                "example": [
                                    {
                                        "idPlaylist": 1,
                                        "idUser": 1,
                                        "title": "UPLOADED_SONGS",
                                        "path_featured_picture": null,
                                        "visibility": "private",
                                        "description": "Songs upload by user 1",
                                        "released_on": 2023,
                                        "created_at": "2023-03-28T19:48:25.000Z",
                                        "updated_at": "2023-03-28T19:48:25.000Z",
                                        "creator_fk": 1,
                                        "username": "dav",
                                        "songs_url": "https://local.host.br:3000/api/playlist/1/song",
                                        "playlist_url": "https://local.host.br:3000/api/playlist/1"
                                    },
                                    {
                                        "idPlaylist": 5,
                                        "idUser": 1,
                                        "title": "The Dark Side Of The Moon",
                                        "path_featured_picture": null,
                                        "visibility": "private",
                                        "description": "The most famous Pink Floyd album",
                                        "released_on": 1977,
                                        "created_at": "2023-03-30T04:48:22.000Z",
                                        "updated_at": "2023-03-30T04:48:22.000Z",
                                        "creator_fk": 1,
                                        "username": "dav",
                                        "songs_url": "https://local.host.br:3000/api/playlist/5/song",
                                        "playlist_url": "https://local.host.br:3000/api/playlist/5"
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "The provided user ID is invalid",
                        "schema": {
                            "content": {
                                "$ref": "#/components/schemas/responseEntity"
                            }
                        }
                    },
                    "401": {
                        "description": "The requester is not authorized to access this user's private playlists",
                        "schema": {
                            "content": {
                                "$ref": "#/components/schemas/responseEntity"
                            }
                        },
                        "example":  {
                            "error": "Access denied! You need to be authorized to perform this action!"
                        }
                    },
                    "404": {
                        "description": "No playlists were found for the provided user ID",
                        "schema": {
                            "content": {
                                "$ref": "#/components/schemas/responseEntity"
                            }
                        }
                    }
                }
            }
        },
        "/playlist/{playlistId}/song/{songId}": {
            "delete": {
                "summary": "Remove song from a playlist",
                "description": "This endpoint allows the user to delete a given song from a given playlist. An user can only perform this action if it is the owner of the playlist.",
                "security": [{"bearerAuth": []}],
                "tags": ["playlists", "songs"],
                "parameters": [
                    {
                        "name": "playlistId",
                        "in": "path",
                        "description": "The playlist ID from which the user wants to remove a song.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    },
                    {
                        "name": "songId",
                        "in": "path",
                        "description": "The ID of the song that the user wants to remove from the playlist with the playlistId.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {},
                    "404": {
                        "summary": "Playlist not found",
                        "description": "The given playlist id doesn't exists in the database",
                        "schema": {
                            "error": "Playlist not found!",
                            "status_code": 404
                        }
                    },
                    "401": {
                        "summary": "Authentication Error",
                        "description": "Authentication failed when attempting to process the request. This error may be due to an expired or missing JWT token, or the user is attempting to add a playlist that is not public or does not belong to them. The response message will indicate the specific reason for the error.",
                        "examples": {
                            "missingToken": {
                                "value": {
                                    "error": "No JWT token was found in the request headers!",
                                    "status_code": 401
                                }
                            },
                            "expiredToken": {
                                "value": {
                                    "error": "The JWT token has expired!",
                                    "status_code": 401
                                }
                            },
                            "playlistAccessError": {
                                "value": {
                                    "error": "Unauthorized access to the requested playlist. The playlist is either not public or the user is not the owner.",
                                    "status_code": 401
                                }
                            }
                        }
                    }
                }
            }
        },
        "/songs": {
            "post": {
                "summary": "Upload a new song",
                "description": "This endpoint allows users to upload a new song in MP3 format along with information about the song.",
                "tags": ["songs"],
                "security": [{"bearerAuth": []}],
                "consumes": ["multipart/form-data"],
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "song_file": {
                                        "description": "The MP3 file to be uploaded",
                                        "type": "string",
                                        "format": "binary"
                                    },
                                    "title": {
                                        "description": "The title of the song",
                                        "type": "string",
                                        "example": "Time"
                                    },
                                    "tags": {
                                        "description": "The tags wich the song belongs to",
                                        "type": "array",
                                        "minItems": 1,
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "minLength": 3,
                                                    "maxLength": 30
                                                },
                                                "type": {
                                                    "type": "string",
                                                    "enum": {
                                                        "genre": {
                                                            "description": "Used when the name of the tag indicates a music genre."
                                                        },
                                                        "feature": {
                                                            "description": "The \"feature\" tags are used to indicate specific information about a song, such as the decade it belongs to, the mood or sentiment it conveys, or the instrumental elements it contains. These tags are useful for categorizing songs more precisely and enabling users to find music that matches their preferences more efficiently."
                                                        },
                                                        "artist": {
                                                            "description": "Used when the name of the tag indicates an artist."
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        "examples": {
                                            "musicGenre": {
                                                "value": {
                                                    "name": "rock",
                                                    "type": "genre"
                                                }
                                            },
                                            "musicFeature": {
                                                "value": {
                                                    "name": "happy",
                                                    "type": "feature"
                                                }
                                            },
                                            "musicArtist": {
                                                "value": {
                                                    "name": "Pink Floyd",
                                                    "type": "artist"
                                                }
                                            }
                                        }
                                    }
                                },
                                "required": ["song_file", "title", "tags"]
                            },
                            "encoding": {
                                "tags": {
                                    "contentType": "application/json"
                                },
                                "title": {
                                    "contentType": "application/json"
                                },
                                "song_file": {
                                    "contentType": "audio/mpeg"
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Song successfully uploaded"
                    },
                    "400": {
                        "description": "Bad request. Check the request parameters."
                    },
                    "401": {
                        "description": "Unauthorized. The user is not authenticated."
                    },
                    "500": {
                        "description": "Internal server error. Something went wrong on the server side."
                    }
                }
            }
        },
        "/playlist/{playlistd}/song": {
            "get": {
                "summary": "Get songs from playlist",
                "description": "Get songs from playlist. If the playlist is private only the user who created it is authorized to access its content.",
                "tags": ["playlists"],
                "security": [{"bearerAuth": []}],
                "parameters": [
                    {
                        "in": "path",
                        "name": "playlistd",
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        },
                        "required": true,
                        "description": "The playlist in wich the user want to get the songs from."
                    }
                ],
                "responses": {
                    "200": {},
                    "403": {}
                }
            }
        },
        "/song/{songId}/stream": {
            "get": {
                "summary": "Stream song",
                "description": "Stream the audio file of the given song in MP3 format",
                "security": [{"bearerAuth": []}],
                "tags": ["songs"],
                "produces": ["application/octet-stream"],
                "parameters": [
                    {
                        "in": "path",
                        "name": "songId",
                        "description": "The ID of the song the client want to stream",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Audio file stream",
                        "content": {
                            "audio/mpeg": {
                                "schema": {
                                    "type": "string",
                                    "format": "bynary"
                                }
                            }
                        },
                        "headers": {
                            "content-disposition": {
                                "schema": {
                                    "type": "string",
                                    "example": "attachment; filename=audio.mp3"
                                }
                            },
                            "content-type": {
                                "type": "string",
                                "example": "multipart/form-data"
                            }
                        }
                    },
                    "404": {
                        "description": "Song not found",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string"
                                },
                                "status_code": {
                                    "type": "integer"
                                }
                            },
                            "example": {
                                "error": "Song Not Found",
                                "status_code": 404
                            }
                        }
                    },
                    "403": {}
                }
            }
        },
        "/song/{songId}": {
            "get": {
                "summary": "Get song information",
                "description": "This route allows the client to get song information, such as its title, duration, playlists in wich the song belongs to and and its tags.",
                "tags": ["songs"],
                "security": [{"bearerAuth": []}],
                "parameters": [
                    {
                        "name": "songId",
                        "in": "path",
                        "description": "The ID of the song to retrieve.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/components/schemas/song"
                        }
                    },
                    "403": {
                        "description": "The client doesn't have access to the given song as it isn't the creator of the song and the song isn't public.",
                        "schema": {
                            "$ref": "#/components/schemas/responseEntity"
                        },
                        "example": {
                            "error": "Access forbidden! Invalid credentials!",
                            "status_code": 403
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete song",
                "description": "Delete a song by its id. Only the user who uploaded it can perform this action.",
                "tags": ["songs"],
                "security": [{"bearerAuth": []}],
                "parameters": [
                    {
                        "name": "songId",
                        "in": "path",
                        "description": "The ID of the song to delete.",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "format": "int64"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful deleted",
                        "schema": {
                            "$ref": "#/components/schemas/responseEntity"
                        },
                        "example": {
                            "message": "Song 4 deleted",
                            "status_code": 200
                        }
                    },
                    "403": {
                        "description": "The client doesn't have access to the given song as it isn't the creator of the song.",
                        "schema": {
                            "$ref": "#/components/schemas/responseEntity"
                        },
                        "example": {
                            "error": "Access forbidden! Invalid credentials!",
                            "status_code": 403
                        }
                    },
                    "404": {
                        "description": "Song not found",
                        "schema": {
                            "$ref": "#/components/schemas/responseEntity"
                        },
                        "example": {
                            "error": "Song not found!",
                            "status_code": 404
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "user": {
                "type": "object",
                "properties": {
                    "idUser": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "username": {
                        "type": "string",
                        "description": "A custom username for the user",
                        "example": "david",
                        "minLength": 2,
                        "maxLength": 20
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "description": "An unique email for the user",
                        "example": "dav@email.com"
                    },
                    "password": {
                        "type": "string",
                        "format": "password",
                        "description": "A password to user authentication",
                        "minLength": 5,
                        "writeOnly": true,
                        "example": "123456"
                    },
                    "bio": {
                        "type": "string",
                        "description": "An user description"
                    },
                    "path_profile_picture": {
                        "type": "string",
                        "description": "Holds the path of the user profile image",
                        "readOnly": true
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "playlist": {
                "type": "object",
                "properties": {
                    "idPlaylist": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "title": {
                        "type": "string",
                        "description": "A title for the playlist",
                        "example": "The Dark Side Of The Moon",
                        "minLength": 3,
                        "maxLength": 50
                    },
                    "description": {
                        "type": "string",
                        "description": "An playlist description",
                        "maxLength": 255,
                        "example": "The most famous Pink Floyd album"
                    },
                    "path_featured_picture": {
                        "type": "string",
                        "description": "Holds the path of the playlist featured image",
                        "readOnly": true
                    },
                    "visibility": {
                        "type": "string",
                        "description": "The visibility of the playlist",
                        "enum": ["private", "public"]
                    },
                    "released_on": {
                        "type": "integer",
                        "description": "Represents the year that the playlist/album was/will be launched",
                        "minimum": 1901
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "tag": {
                "type": "object",
                "properties": {
                    "idTag": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "type": "string",
                        "minLength": 3,
                        "maxLength": 30
                    },
                    "type": {
                        "type": "string",
                        "enum": {
                            "genre": {
                                "description": "Used when the name of the tag indicates a music genre."
                            },
                            "feature": {
                                "description": "The \"feature\" tags are used to indicate specific information about a song, such as the decade it belongs to, the mood or sentiment it conveys, or the instrumental elements it contains. These tags are useful for categorizing songs more precisely and enabling users to find music that matches their preferences more efficiently."
                            },
                            "artist": {
                                "description": "Used when the name of the tag indicates an artist."
                            }
                        }
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    }
                }
            },
            "song": {
                "type": "object",
                "description": "This entity represents the songs saved by the user and holds useful information about each song, such as title, creation date, creator user and so on.",
                "properties": {
                    "idSong": {
                        "type": "integer",
                        "readOnly": true
                    },
                    "title": {
                        "type": "string",
                        "summary": "The name of the song",
                        "description": "It is recommended that the tag name be in lowercase. However, if the name describes an artist or anything else that should be capitalized, it is allowed to be written in the desired case.",
                        "example": "Time",
                        "minLength": 3,
                        "maxLength": 50
                    },
                    "file_path": {
                        "type": "string",
                        "description": "The file path of the song in the file system. It holds the timestamp which the song was saved, plus the type of the file, such as mp3.",
                        "readOnly": true,
                        "example": "1679604684826.mp3"
                    },
                    "created_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "updated_at": {
                        "type": "string",
                        "format": "date-time",
                        "readOnly": true
                    },
                    "creator_fk": {
                        "type": "string",
                        "description": "Holds the user foreign key.",
                        "readOnly": true
                    }
                }
            },
            "responseEntity": {
                "type": "object",
                "description": "This entity is retrieved only, and only when PUT and DELETE requests succeeds and holds useful information about the operation made. If the operation fails, the server will retrieve the default error entity",
                "properties": {
                    "message": {
                        "type": "string",
                        "summary": "Success message",
                        "description": "Holds information about the operation made",
                        "example": "Entity with id 4 successfully updated"
                    },
                    "status_code": {
                        "type": "number",
                        "format": "int32",
                        "summary": "Success Status code",
                        "description": "Holds the appropriate status code of the  operation",
                        "example": 200
                    }
                },
                "examples": {
                    "missingToken": {
                        "value": {
                            "error": "No JWT token was found in the request headers!",
                            "status_code": 401
                        }
                    },
                    "expiredToken": {
                        "value": {
                            "error": "The JWT token has expired!",
                            "status_code": 401
                        }
                    },
                    "playlistAccessError": {
                        "value": {
                            "error": "Unauthorized access to the requested playlist. The playlist is either not public or the user is not the owner.",
                            "status_code": 401
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            },
            "cookieRefreshToken": {
                "type": "apiKey",
                "in": "cookie",
                "name": "jwt"
            }
        }
    }
}